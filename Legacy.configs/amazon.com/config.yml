---
config:
    debug: 2
    agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36
do:
# Add start URL to the pool (you can add a list of start URLs)
- link_add:
    url:
    - https://www.amazon.com/s?bbn=16225011011&rh=n%3A%2116225011011%2Cn%3A284507%2Cn%3A289913%2Cn%3A289940&dc&fst=as%3Aoff&ie=UTF8&qid=1547931533&rnid=289913&ref=sr_nr_n_1
# Set variable to "yes" value to use it with repeat mode
# while value of this variable is "yes". the walk command will reload current page in the pool
- variable_set:
    field: rip
    value: "yes"
# Iterating links in the pool and loading them
- walk:
    to: links
    repeat_in_pool: <%rip%>
    do:
    # Expecting to the worse and set repeat variable to "yes" value
    - variable_set:
        field: rip
        value: "yes"
    # Switch to the title block to check if access if blocked
    - find: 
        path: title 
        do: 
        # Parse value of title to the register
        - parse
        # Check if there is word "Sorry"
        - if:
            match: Sorry
            do:
            # If so, access is blocked, so we switch the proxy
            - proxy_switch
            else:
            # If not, then access is allowed. Check if there is captcha on the page.
            # Switch to the body block. Please note of option "in" usage.
            # Right now we are in the "title" bvlock and there is no body tag inside of it
            # so we should search for body block in full document intead of current block
            # to do it you can use option in: doc
            - find:
                path: body
                in: doc
                do:
                # Parse entire page text to the register
                - parse
                # Check if there is specified string in the text
                - if:
                    match: Type the characters you see in this image
                    do:
                    # If so, we have a captcha on the page and we need to solve it
                    # to do it we need to extract some parameters from the page and save them to variables
                    - find:
                        path: input[name="amzn"]
                        do:
                        - parse:
                            attr: value
                        - normalize:
                            routine: urlencode
                        - variable_set: amzn
                    - find:
                        path: input[name="amzn-r"]
                        do:
                        - parse:
                            attr: value
                        - normalize:
                            routine: urlencode
                        - variable_set: amznr
                    # Switch to the block with captcha image
                    - find:
                        path: div.a-row>img
                        do:
                        # Parse URL of the image
                        - parse:
                            attr: src
                        # Load the image
                        - walk:
                            to: value
                            do:
                            # In imgbase64 block we will have an image encoded as base64
                            # This is how Diggernaut works with binary data
                            # Any binary file is encoded as base64  and you can work with it
                            # using other Diggernaut functionality (such as OCR, save files etc)
                            - find:
                                path: imgbase64
                                do:
                                # Parse block content
                                - parse
                                # save it to the capimg variable
                                - variable_set: capimg
                                # Use command for solving captcha
                                # Use "diggernaut" as provider to use in-house captcha solver
                                # Our captcha type is "amazon"
                                # Also we should pass image with captcha here, using variable capimg
                                - captcha_resolve:
                                    provider: diggernaut
                                    type: amazon
                                    image: <%capimg%>
                                # After captcha_resolve exacution we should have
                                # recognized captcha text in the "captcha" variable
                                # so we read this variable value to the register
                                - variable_get: captcha
                                # And check if there is any value
                                - if:
                                    match: \S+
                                    do:
                                    # If captcha recognized, we are sending captcha answer to Amazon server
                                    - walk:
                                        to: https://www.amazon.com/errors/validateCaptcha?amzn=<%amzn%>&amzn-r=<%amznr%>&field-keywords=<%captcha%>
                                        do:
                    else:
                    # String not found, so page is without captcha
                    # and we are working with standard catalog page
                    # Turn off repeat mode for the current page
                    - variable_set:
                        field: rip
                        value: "no"
                    # Pause for 5 sec
                    - sleep: 5
                    # Start parsing process
                    # First lets get next page and push to the pool
                    - find:
                        path: li.a-last > a, a.pagnNext
                        do:
                        # Parse href attribute
                        - parse:
                            attr: href
                        # Check if there is value in href
                        - if:
                            match: \w+
                            do:
                            # If so put it to the pool
                            - link_add
                    # Extract listings, jump to each listing
                    # First layout
                    - find:
                        path: div.s-result-item
                        do:
                        # Parse data-asin attribute to get ASIN
                        - parse:
                            attr: data-asin
                        # Check if ASIN is in register
                        - if:
                            match: \w+
                            do:
                            # Create new data object
                            - object_new: item
                            - object_field_set:
                                object: item
                                field: asin
                            # Lets generate URL to product page
                            # Save ASIN to variable
                            - variable_set: asin
                            # Write string to the register and then save URL to the object field
                            - register_set: https://www.amazon.com/dp/<%asin%>
                            - object_field_set:
                                object: item
                                field: url
                            # Extract product name
                            - find:
                                path: h5
                                do:
                                - parse
                                # Normalize whitespaces
                                - space_dedupe
                                # Trim the register value
                                - trim
                                # Save register value to the object field
                                - object_field_set:
                                    object: item
                                    field: title
                            # Extract brand
                            - find:
                                path: div.a-section:haschild(h5) > div.a-color-secondary
                                do:
                                - parse
                                - space_dedupe
                                - trim
                                # Remove "by" word
                                - normalize:
                                    routine: replace_substring
                                    args:
                                        ^by\s+: ''
                                - object_field_set:
                                    object: item
                                    field: brand
                            # Extract rating
                            - find:
                                path: span[aria-label]
                                slice: 0
                                do:
                                - parse:
                                    attr: aria-label
                                    filter: ^([0-9\.]+)
                                # Check if rating value is exist
                                - if:
                                    match: \d+
                                    do:
                                    # Save value to the object field as float type
                                    - object_field_set:
                                        object: item
                                        field: rating
                                        type: float
                            # Extract reviews
                            - find:
                                path: span[aria-label]
                                slice: 1
                                do:
                                - parse:
                                    attr: aria-label
                                    filter: (\d+)
                                - if:
                                    match: \d+
                                    do:
                                    # Save value to the object field as int type
                                    - object_field_set:
                                        object: item
                                        field: reviews
                                        type: int
                            # Extract price
                            - find:
                                path: span.a-price > span.a-offscreen
                                slice: 0
                                do:
                                - parse:
                                    filter:
                                    - ([0-9\.]+)\s*\-
                                    - ([0-9\.]+)
                                - object_field_set:
                                    object: item
                                    field: price
                                    type: float
                            # Extract prime
                            # Dafault it to "no"
                            - register_set: "no"
                            - object_field_set:
                                object: item
                                field: prime
                            - find:
                                path: i.a-icon-prime
                                do:
                                - register_set: "yes"
                                - object_field_set:
                                    object: item
                                    field: prime
                            # Extract sellers
                            - find:
                                path: a:contains("new offers")
                                do:
                                - parse:
                                    filter: (\d+)
                                - object_field_set:
                                    object: item
                                    field: sellers
                                    type: int
                            # Extract image
                            - find:
                                path: img.s-image
                                do:
                                - parse:
                                    attr: src
                                # Replace substring in URL to make it full-sized
                                - normalize:
                                    routine: replace_substring
                                    args:
                                        \.[^\.]+\.jpg: '.jpg'
                                - normalize:
                                    routine: url
                                - object_field_set:
                                    object: item
                                    field: image
                            - object_save:
                                name: item
                    # Second layout
                    - find:
                        path: li.s-result-item
                        do:
                        - parse:
                            attr: data-asin
                        - if:
                            match: \w+
                            do:
                            - object_new: item
                            - object_field_set:
                                object: item
                                field: asin
                            - variable_set: asin
                            - register_set: https://www.amazon.com/dp/<%asin%>
                            - object_field_set:
                                object: item
                                field: url
                            - find:
                                path: h2
                                do:
                                - node_remove: span.a-offscreen
                                - parse
                                - space_dedupe
                                - trim
                                - object_field_set:
                                    object: item
                                    field: title
                            # Slice here will select just last found element
                            - find:
                                path: div.a-spacing-mini:has(h2) > div.a-row > span
                                slice: -1
                                do:
                                - parse
                                - space_dedupe
                                - trim
                                - object_field_set:
                                    object: item
                                    field: brand
                            - find:
                                path: i.a-icon-star>span
                                do:
                                - parse:
                                    filter: ^([0-9\.]+)
                                - if:
                                    match: \d+
                                    do:
                                    - object_field_set:
                                        object: item
                                        field: rating
                                        type: float
                            - find:
                                path: div.a-spacing-none:has(i.a-icon-star) > a.a-size-small
                                do:
                                - parse:
                                    filter: (\d+)
                                - if:
                                    match: \d+
                                    do:
                                    - object_field_set:
                                        object: item
                                        field: reviews
                                        type: int
                            - find:
                                path: span.a-offscreen
                                slice: -1
                                do:
                                - parse:
                                    filter:
                                    - ([0-9\.]+)\s*\-
                                    - ([0-9\.]+)
                                - object_field_set:
                                    object: item
                                    field: price
                                    type: float
                            - register_set: "no"
                            - object_field_set:
                                object: item
                                field: prime
                            - find:
                                path: i.a-icon-prime
                                do:
                                - register_set: "yes"
                                - object_field_set:
                                    object: item
                                    field: prime
                            - find:
                                path: a:contains("new offers")
                                do:
                                - parse:
                                    filter: (\d+)
                                - object_field_set:
                                    object: item
                                    field: sellers
                                    type: int
                            - find:
                                path: img.s-access-image
                                do:
                                - parse:
                                    attr: src
                                - normalize:
                                    routine: replace_substring
                                    args:
                                        \.[^\.]+\.jpg: '.jpg'
                                - normalize:
                                    routine: url
                                - object_field_set:
                                    object: item
                                    field: image
                            - object_save:
                                name: item
